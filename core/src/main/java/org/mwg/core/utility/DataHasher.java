package org.mwg.core.utility;

public class DataHasher {

    /**
     * @native ts
     * private static byteTable : number[] = [-3480515477827284314, -3307358911275897274, 2262014355238238183, -6768715312815710428, -1361935169926033423, -329230681982008839, -3440304206788337213, 2867858071806528111, -8596772195713692333, -8976692496864135163, 4591629993832563184, 7770547292939826974, 8648074652193402690, 7989906104122808095, 7833474959911929480, -3236301672554511903, 5692742246141660865, -5186809798123896852, -3143318607907665191, -2426078442329855404, -3746832036013371997, 1998435151822477392, -670025558597441761, -1250784308060119782, 1771464809674919995, 1910884771278601512, 370566924444113725, -6863640461266585432, 8377643218524972116, 4924429569076085374, 47583700571916822, -4545470526160126167, 8395968838571341375, -5022915209227679816, -4084671909599045616, -2755734677672249486, 2949410485976134594, -4696113903351293696, -4793098847497190830, 3274809889905678903, -573276321285810930, -2320028162224687701, 7549374284762044030, -6833225243513010636, -7615600885679970609, -6411552413921715013, -1003302319195411276, -5248824436507568263, -8246856280812544388, -1241148451251718771, -3122779499083438280, -1689995964891925724, 1631615095491599441, 8010434746464252822, 1010664603686173607, -351491500717746338, -1487102970799145042, 8094607092924976823, -8679127727935041269, 3944070590698097824, -8075236462730314448, -3120055265415286864, 7110415066501411298, 7730486204346052600, -3733669536466097934, -5525281948038127700, -2664264206677000827, -8226717907549575671, -6053405031854430469, 2611884437997545198, -8883806921176195773, -5464132922437201029, 6114232650842024585, -7110961761650278764, 5499490877457599072, -8194495940663107147, -630633481968614694, -8665908672003527587, -6105071496752242620, 1436192807487635024, -2076647606073954255, 5968026341841934143, 4938642129126233212, -8175880615780701581, -2264130582333703029, -821849254730529651, -1492763349733573986, -3420450311071321836, 8714691308830070484, -5072184612544497637, 6063645121644628526, 3871329301211779646, -93459444024257970, -6267322802559012045, -48495887231403723, 103806064002401577, -8258382889448368916, 4364497966305475062, 8187232884581007326, 5112856389069587259, -3695972166753054001, -925420352653443722, -502437504084969331, 8535384488422134537, 8797269199380259979, -6589054335629657478, -965483979892245935, -6848337635005874081, 4466361303615168174, 1016010164410668383, 6502427480846791419, 4523409138600186326, 4782256234291794626, 1387062054421315546, -7323235810728624751, 8373375858658632306, 3215435465907060030, 1578915207441810671, -780158064672387510, -5258954611293607201, -1476331197317369267, 3031109076515099231, -6513029593008994513, 5238343839092047854, 179764997137220255, -4142804025283056092, -2328223599069799599, 5390572148285821844, -3508138558213461729, 7401316701244379557, 3188176410935613991, 2613096410086511181, -1210330987478954241, -262665717720507328, -7924236570179611405, -8501180480958139534, 2286898453697603562, -7296189493579172643, -1505697375801193187, 8866282940483413083, 3462491682569765449, -7719674551353089811, -2161194498650812514, -9142084895327164217, 2912269426253424631, -2094038580941862293, 7603300406230694745, -2156232326582767390, -8595368888295842804, 7038089351650850263, 5385857580712720222, 3159223839514813084, 7449395206321399379, -5553026780323764608, -1945192731452579623, 4306813996256725841, 1921134291979451637, -2948440929853472943, 8039017109570446028, -6306409939402452116, 6033142984240109625, -1529461589995132384, 9212007006731649032, 6073776529800772667, -6653500679927351123, 2851888106878263839, 3064555868169304787, -8789684711242970580, -6636024529547316901, -1696268702754803932, 7962120236423073014, 6310294755067445108, 6952956091616363864, -1257969866064956051, -3230197009330043090, 466051326882664234, -8990502422291877759, 3511884079593940586, -673172333283142235, -8387973872236573825, 5801748266428596550, -765473790636724417, 2299791812217240052, -3982099247510642510, 8363167232250933010, -284867118239866829, -695673455101359417, 1337057017176526006, 1928674199725149542, 3027969140523417273, 134390639076266432, 5178326254108383635, 305200236323501870, -1916420834436969918, -3628730979870316789, 5111373756676551019, -7577261024546646812, 3340920341289787690, -9031099925207558717, 8359247114012761102, 7628748628125057437, 1127242291666912707, -6322263984570680122, 6003284039635515681, -3032099228994682726, -1884700960914865879, -5788904642192910968, 2854932081746735331, -7428071783526009222, 8573670888428201568, 5810073386670273709, -7519873288890813123, 2175631643081917093, 989012021910301725, 6994713847597884117, 3765307143604171584, 7080051105120987513, -3224276316720215554, -6536903602631015789, -7464153181488350413, 872865169683943692, 4812315419915240848, -7686482479531469484, 6628482486149420513, -6200169312732968583, 1423783026527937547, 7129518922975669267, 7533504780256217948, 3650372496225600680, 6463552836629620157, 7833479444823382622, 3693238099526532399, 2068290963696667194, -7369914207768820440, -2139560453621866945, -3862094089889838238, -3281240462630792858, 1322452504935018966, 6185189471196572406, -6894816618483581829, -4395696721694463508, 3296715924975286578, 3121401685695772513, -7749132016723285999, 7574420387761718216, 8628303115545545892, 3016699154499719643, -3843394535643880234, 4055081606798156314, 4137556512058409676, -7563373001546752990, -4014144882173344324, -2212638506836738290, 3602957959237188066, -3269164780412519188, -6136318789233837323];
     */
    private static final long[] byteTable = createLookupTable();

    /**
     * @native ts
     * private static HSTART : Long = Long.fromNumber(0xBB40E64DA205B064, false);
     */
    private static final long HSTART = 0xBB40E64DA205B064L;

    /**
     * @native ts
     * private static HMULT : Long = Long.fromNumber(7664345821815920749, false);
     */
    private static final long HMULT = 7664345821815920749L;

    /**
     * @native ts
     * var h = org.mwg.core.utility.DataHasher.HSTART;
     * var dataLength = data.length;
     * for (var i = 0; i < dataLength; i++) {
     * h = h.mul(org.mwg.core.utility.DataHasher.HMULT).xor(org.mwg.core.utility.DataHasher.byteTable[data.charCodeAt(i) & 0xff]);
     * }
     * return h.toNumber();
     */
    public static long hash(String data) {
        long h = HSTART;
        final long hmult = HMULT;
        final long[] ht = byteTable;
        int dataLength = data.length();
        for (int i = 0; i < dataLength; i++) {
            h = (h * hmult) ^ ht[data.codePointAt(i) & 0xff];
        }
        return h;
    }

    /*
    public static long hash(byte[] data) {
        long h = HSTART;
        final long hmult = HMULT;
        final long[] ht = byteTable;
        for (int len = data.length, i = 0; i < len; i++) {
            h = (h * hmult) ^ ht[data[i] & 0xff];
        }
        return h;
    }*/

    /**
     * @ignore ts
     */
    private static final long[] createLookupTable() {
        long[] byteTable = new long[256];
        long h = 0x544B2FBACAAF1684L;
        for (int i = 0; i < 256; i++) {
            for (int j = 0; j < 31; j++) {
                h = (h >>> 7) ^ h;
                h = (h << 11) ^ h;
                h = (h >>> 10) ^ h;
            }
            byteTable[i] = h;
            //System.out.print(h + ", ");
        }
        //System.out.println();
        return byteTable;
    }
/*
    public static void main(String[] args) {
        DataHasher.createLookupTable();
    }
*/
}