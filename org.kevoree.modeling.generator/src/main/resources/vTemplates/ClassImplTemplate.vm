#set($classDeclaration = $context.classDeclaration)
package ${classDeclaration.pack}.impl;

public class ${classDeclaration.name}Impl extends #if($classDeclaration.isInferred()) org.kevoree.modeling.abs.AbstractKObjectInfer #else org.kevoree.modeling.abs.AbstractKObject #end implements ${classDeclaration.pack}.${classDeclaration.name} {

    public ${classDeclaration.name}Impl(long p_universe, long p_time, long p_uuid, org.kevoree.modeling.meta.KMetaClass p_metaClass, org.kevoree.modeling.memory.manager.internal.KInternalDataManager p_manager, long p_previousUniverse, long p_previoustTime) {
        super(p_universe, p_time, p_uuid, p_metaClass, p_manager,p_previousUniverse,p_previoustTime);
    }

#foreach($attribute in $classDeclaration.attributes)

    @Override
    public $context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) get${context.generationContext.helper.toCamelCase($attribute.getName())}() {
        return ($context.generationContext.getHelper().convertToJavaType($attribute.getType())) get(${classDeclaration.pack}.meta.Meta${classDeclaration.name}.ATT_${attribute.getName().toUpperCase()});
    }

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} set${context.generationContext.helper.toCamelCase(${attribute.getName()})}($context.generationContext.getHelper().convertToJavaType(${attribute.getType()}) p_obj) {
        set(${classDeclaration.pack}.meta.Meta${classDeclaration.name}.ATT_${attribute.getName().toUpperCase()}, p_obj);
        return this;
    }

#end


#foreach($ref in $classDeclaration.references)
    #if($ref.visible)

    #if($ref.single)

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} set${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.KActionType.SET, ${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()}, p_obj);
        return this;
    }

    @Override
    public void get${context.generationContext.helper.toCamelCase(${ref.getName()})}(final org.kevoree.modeling.KCallback<${ref.getType().fqn}> cb) {
        if(cb == null){
            return;
        }
        this.ref(${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()}, new org.kevoree.modeling.KCallback<org.kevoree.modeling.KObject[]>() {
            @Override
            public void on(org.kevoree.modeling.KObject[] kObjects) {
                if(kObjects.length >0){
                    cb.on((${ref.getType().fqn}) kObjects[0]);
                } else {
                    cb.on(null);
                }
            }
        });
    }

    #{else}

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} add${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.KActionType.ADD, ${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()}, p_obj);
        return this;
    }

    @Override
    public ${classDeclaration.pack}.${classDeclaration.name} remove${context.generationContext.helper.toCamelCase(${ref.getName()})}(${ref.getType().fqn} p_obj) {
        mutate(org.kevoree.modeling.KActionType.REMOVE, ${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()}, p_obj);
        return this;
    }

    @Override
    public void get${context.generationContext.helper.toCamelCase(${ref.getName()})}(final org.kevoree.modeling.KCallback<${ref.getType().fqn}[]> cb) {
        if(cb == null){
            return;
        }
        this.ref(${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()}, new org.kevoree.modeling.KCallback<org.kevoree.modeling.KObject[]>() {
            @Override
            public void on(org.kevoree.modeling.KObject[] kObjects) {
                ${ref.getType().fqn}[] casted = new ${ref.getType().fqn}[kObjects.length];
                for(int i=0;i<kObjects.length;i++){
                    casted[i] = (${ref.getType().fqn}) kObjects[i];
                }
                cb.on(casted);
            }
        });
    }

    public int sizeOf${context.generationContext.helper.toCamelCase($ref.getName())}() {
        return size(${classDeclaration.pack}.meta.Meta${classDeclaration.name}.REF_${ref.getName().toUpperCase()});
    }
    #end

    #end
#end

#foreach($operation in $classDeclaration.operations)
    public void ${operation.name}(#foreach($p in $operation.inputParams)$p.type p_$p.name, #{end}final org.kevoree.modeling.KCallback<#if(${operation.returnParam})$operation.returnParam.type#{else}Boolean#end> p_result){
        Object[] ${operation.name}_params = new Object[$operation.inputParams.size()];
    #set($paramIndex = 0)
#foreach($p in $operation.inputParams)
        ${operation.name}_params[$paramIndex] = p_$p.name;
#set($paramIndex = $paramIndex + 1)
#{end}
        _manager.operationManager().call(this, ${classDeclaration.pack}.meta.Meta${classDeclaration.name}.OP_${operation.name.toUpperCase()}, ${operation.name}_params, new org.kevoree.modeling.KCallback<Object>() {
            public void on(Object o) {
                p_result.on((#if(${operation.returnParam})$operation.returnParam.type#{else}Boolean#end)o);
            }
        });
    }
#end

#if($classDeclaration.isInferred())

    #set($i = 0)
    public void train(#foreach($dependency in $classDeclaration.dependencies)#if($i!=0), #end${dependency.type.pack}.$dependency.type.name $dependency.name#set($i=$i+1)#end#foreach($output in $classDeclaration.outputs)#if($i!=0), #end${context.generationContext.getHelper().getInstance().convertToJavaType(${output.type})} $output.name#set($i=$i+1)#end#if($i!=0),#end org.kevoree.modeling.KCallback callback){
        genericTrain(new org.kevoree.modeling.KObject[]{ #set($isFirst=true) #foreach($dependency in $classDeclaration.dependencies)#if($isFirst!=true),#end ${dependency.name} #set($isFirst=false)#end},new Object[]{#foreach($output in $classDeclaration.outputs)${output.name}#end},callback);
    }

    #set($i = 0)
    public void trainAll(#foreach($dependency in $classDeclaration.dependencies)#if($i!=0), #end${dependency.type.pack}.${dependency.type.name}[] ${dependency.name}#set($i=$i+1)#end#foreach($output in $classDeclaration.outputs)#if($i!=0), #end${context.generationContext.getHelper().getInstance().convertToJavaType(${output.type})}[] $output.name#set($i=$i+1)#end#if($i!=0),#end org.kevoree.modeling.KCallback callback){
        genericTrainAll(new org.kevoree.modeling.KObject[][]{ #set($isFirst=true) #foreach($dependency in $classDeclaration.dependencies)#if($isFirst!=true),#end ${dependency.name} #set($isFirst=false)#end},new Object[][]{#foreach($output in $classDeclaration.outputs)${output.name}#end},callback);
    }

    #set($i = 0)
    public void infer(#foreach($dependency in $classDeclaration.dependencies)#if($i!=0), #end${dependency.type.pack}.$dependency.type.name ${dependency.name}#set($i=$i+1)#end #if($i!=0),#end #if($classDeclaration.multipleOutput()) org.kevoree.modeling.KCallback<Object[]> callback #else org.kevoree.modeling.KCallback<#foreach($output in $classDeclaration.outputs) ${context.generationContext.getHelper().getInstance().convertToJavaType(${output.type})} #end> callback #end){
        genericInfer(new org.kevoree.modeling.KObject[]{ #set($isFirst=true) #foreach($dependency in $classDeclaration.dependencies)#if($isFirst!=true),#end ${dependency.name} #set($isFirst=false)#end},
    #if($classDeclaration.multipleOutput())
        callback);
    #else
        new org.kevoree.modeling.KCallback<Object[]>() {@Override public void on(Object[] objects) {callback.on( (${context.generationContext.getHelper().getInstance().convertToJavaType(${classDeclaration.outputs[0].type})}) objects[0]);}});
    #end

    }

    #set($i = 0)
    public void inferAll(#foreach($dependency in $classDeclaration.dependencies)#if($i!=0), #end${dependency.type.pack}.${dependency.type.name}[] ${dependency.name}#set($i=$i+1)#end #if($i!=0),#end #if($classDeclaration.multipleOutput()) org.kevoree.modeling.KCallback<Object[][]> callback #else org.kevoree.modeling.KCallback<#foreach($output in $classDeclaration.outputs) ${context.generationContext.getHelper().getInstance().convertToJavaType(${output.type})} #end []> callback #end){
    genericInferAll(new org.kevoree.modeling.KObject[][]{ #set($isFirst=true) #foreach($dependency in $classDeclaration.dependencies)#if($isFirst!=true),#end ${dependency.name} #set($isFirst=false)#end},
    #if($classDeclaration.multipleOutput())
        callback);
    #else
                new org.kevoree.modeling.KCallback<Object[][]>() {
                    @Override
                    public void on(Object[][] objects) {
                        ${context.generationContext.getHelper().getInstance().convertToJavaType(${classDeclaration.outputs[0].type})}[] resultSet = new ${context.generationContext.getHelper().getInstance().convertToJavaType(${classDeclaration.outputs[0].type})}[objects.length];
                        for(int i=0;i<objects.length;i++){
                            resultSet[i] = (${context.generationContext.getHelper().getInstance().convertToJavaType(${classDeclaration.outputs[0].type})})objects[i][0];
                        }
                        callback.on(resultSet);
                    }
                });
    #end

    }

#end


}
#* @vtlvariable name="context" type="org.kevoree.modeling.generator.ClassGenerationContext" *#
#* @vtlvariable name="classDeclaration" type="org.kevoree.modeling.ast.MModelClass" *#